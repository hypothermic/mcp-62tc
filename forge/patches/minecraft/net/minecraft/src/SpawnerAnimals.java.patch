--- ../src_base/minecraft/net/minecraft/src/SpawnerAnimals.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft/net/minecraft/src/SpawnerAnimals.java	0000-00-00 00:00:00.000000000 -0000
@@ -1,10 +1,14 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 
+import net.minecraft.src.forge.ForgeHooks;
+
 public final class SpawnerAnimals
 {
     /** The 17x17 area around the player where mobs can spawn */
@@ -20,7 +24,7 @@
     {
         Chunk var3 = par0World.getChunkFromChunkCoords(par1, par2);
         int var4 = par1 * 16 + par0World.rand.nextInt(16);
-        int var5 = par0World.rand.nextInt(var3 == null ? 128 : Math.max(128, var3.getTopFilledSegment()));
+        int var5 = par0World.rand.nextInt(var3 == null ? 128 : Math.max(128, var3.getTopFilledSegment() + 15)); //Vanilla Bug that causes mobs to not spawn on the topmost chunk with blocks.
         int var6 = par2 * 16 + par0World.rand.nextInt(16);
         return new ChunkPosition(var4, var5, var6);
     }
@@ -78,6 +82,12 @@
                 if ((!var34.getPeacefulCreature() || par2) && (var34.getPeacefulCreature() || par1) && par0World.countEntities(var34.getCreatureClass()) <= var34.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / 256)
                 {
                     Iterator var35 = eligibleChunksForSpawning.keySet().iterator();
+                    if (mod_MinecraftForge.SPAWNER_MAKE_MORE_RANDOM)
+                    {
+                        ArrayList<ChunkCoordIntPair> tmp = new ArrayList(eligibleChunksForSpawning.keySet());
+                        Collections.shuffle(tmp);
+                        var35 = tmp.iterator();
+                    }
                     label108:
 
                     while (var35.hasNext())
@@ -202,7 +212,8 @@
         else
         {
             int var5 = par1World.getBlockId(par2, par3 - 1, par4);
-            return Block.isNormalCube(var5) && var5 != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
+            boolean spawnBlock = (Block.blocksList[var5] != null && Block.blocksList[var5].canCreatureSpawn(par0EnumCreatureType, par1World, par2, par3 - 1, par4));
+            return spawnBlock && var5 != Block.bedrock.blockID && !par1World.isBlockNormalCube(par2, par3, par4) && !par1World.getBlockMaterial(par2, par3, par4).isLiquid() && !par1World.isBlockNormalCube(par2, par3 + 1, par4);
         }
     }
 
@@ -211,6 +222,16 @@
      */
     private static void creatureSpecificInit(EntityLiving par0EntityLiving, World par1World, float par2, float par3, float par4)
     {
+        if (ForgeHooks.onEntitySpawnSpecial(par0EntityLiving, par1World, par2, par3, par4)) //Deprecated in 1.2.5, remove in 1.3
+        {
+            return;
+        }
+
+        if (ForgeHooks.onEntityLivingSpawn(par0EntityLiving, par1World, par2, par3, par4))
+        {
+            return;
+        }
+
         if (par0EntityLiving instanceof EntitySpider && par1World.rand.nextInt(100) == 0)
         {
             EntitySkeleton var7 = new EntitySkeleton(par1World);
