--- ../src-base/minecraft/net/minecraft/src/RenderEngine.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src-work/minecraft/net/minecraft/src/RenderEngine.java	0000-00-00 00:00:00.000000000 -0000
@@ -1,6 +1,10 @@
 package net.minecraft.src;
 
+import static org.lwjgl.opengl.GL11.GL_TEXTURE_2D;
+import static org.lwjgl.opengl.GL11.GL_TEXTURE_WIDTH;
+
 import java.awt.Color;
+import java.awt.Dimension;
 import java.awt.Graphics;
 import java.awt.image.BufferedImage;
 import java.awt.image.ImageObserver;
@@ -13,9 +17,16 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 import javax.imageio.ImageIO;
+
 import org.lwjgl.opengl.GL11;
 
+import cpw.mods.fml.client.FMLClientHandler;
+import cpw.mods.fml.common.FMLCommonHandler;
+
 public class RenderEngine
 {
     public static boolean field_1609_a = false;
@@ -24,7 +35,7 @@
     private IntHashMap field_1607_c = new IntHashMap();
     private IntBuffer field_1606_d = GLAllocation.func_1125_c(1);
     private ByteBuffer field_1605_e = GLAllocation.func_1127_b(16777216);
-    private List field_1604_f = new ArrayList();
+    public List field_1604_f = new ArrayList();
     private Map field_1603_g = new HashMap();
     private GameSettings field_1602_h;
     public boolean field_4281_i = false;
@@ -32,6 +43,7 @@
     private TexturePackList field_6527_k;
     private BufferedImage field_25189_l = new BufferedImage(64, 64, 2);
     private int field_48512_n = 16;
+    public static Logger log = FMLCommonHandler.instance().getFMLLogger();
 
     public RenderEngine(TexturePackList p_i754_1_, GameSettings p_i754_2_)
     {
@@ -95,8 +107,9 @@
                 this.field_28151_c.put(p_28149_1_, var3);
                 return var3;
             }
-            catch (IOException var5)
+            catch (Exception var5)
             {
+                log.log(Level.INFO,String.format("An error occured reading texture file %s (getTexture)", p_28149_1_),var5);
                 var5.printStackTrace();
                 int[] var4 = this.func_28148_b(this.field_25189_l);
                 this.field_28151_c.put(p_28149_1_, var4);
@@ -251,6 +264,7 @@
 
         int var3 = p_1068_1_.getWidth();
         int var4 = p_1068_1_.getHeight();
+        FMLClientHandler.instance().setTextureDimensions(p_1068_2_, var3, var4, (List<TextureFX>)field_1604_f);
         int[] var5 = new int[var3 * var4];
         byte[] var6 = new byte[var3 * var4 * 4];
         p_1068_1_.getRGB(0, 0, var3, var4, var5, 0, var3);
@@ -448,6 +462,7 @@
 
     public void func_1066_a(TextureFX p_1066_1_)
     {
+        FMLClientHandler.instance().onPreRegisterEffect(p_1066_1_);
         this.field_1604_f.add(p_1066_1_);
         p_1066_1_.func_783_a();
     }
@@ -460,10 +475,26 @@
         {
             TextureFX var3 = (TextureFX)this.field_1604_f.get(var2);
             var3.field_1131_c = this.field_1602_h.field_1578_g;
-            var3.func_783_a();
-            this.field_1605_e.clear();
-            this.field_1605_e.put(var3.field_1127_a);
-            this.field_1605_e.position(0).limit(var3.field_1127_a.length);
+            if (!FMLClientHandler.instance().onUpdateTextureEffect(var3))
+            {
+                continue;
+            }
+
+            Dimension dim = FMLClientHandler.instance().getTextureDimensions(var3);
+            int tWidth  = dim.width / 16;
+            int tHeight = dim.height / 16;
+            int tLen = tWidth * tHeight * 4;
+            
+            if (var3.field_1127_a.length == tLen)
+            {
+                this.field_1605_e.clear();
+                this.field_1605_e.put(var3.field_1127_a);
+                this.field_1605_e.position(0).limit(var3.field_1127_a.length);
+            }
+            else
+            {
+                FMLClientHandler.instance().scaleTextureFXData(var3.field_1127_a, field_1605_e, tWidth, tLen);
+            }
 
             if (var3.field_1126_b != var1)
             {
@@ -473,9 +504,11 @@
 
             for (int var4 = 0; var4 < var3.field_1129_e; ++var4)
             {
+                int xOffset = var3.field_1126_b % 16 * tWidth + var4 * tWidth;
                 for (int var5 = 0; var5 < var3.field_1129_e; ++var5)
                 {
-                    GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, var3.field_1126_b % 16 * 16 + var4 * 16, var3.field_1126_b / 16 * 16 + var5 * 16, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.field_1605_e);
+                    int yOffset = var3.field_1126_b / 16 * tHeight + var5 * tHeight;
+                    GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, xOffset, yOffset, tWidth, tHeight, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.field_1605_e);
                 }
             }
         }
@@ -577,8 +610,9 @@
                 this.field_4280_j = false;
                 this.field_4281_i = false;
             }
-            catch (IOException var7)
+            catch (Exception var7)
             {
+                log.log(Level.INFO,String.format("An error occured reading texture file %s (refreshTexture)", var9),var7);
                 var7.printStackTrace();
             }
         }
@@ -614,11 +648,13 @@
                 this.field_4280_j = false;
                 this.field_4281_i = false;
             }
-            catch (IOException var6)
+            catch (Exception var6)
             {
+                log.log(Level.INFO,String.format("An error occured reading texture file data %s (refreshTexture)", var9),var6);
                 var6.printStackTrace();
             }
         }
+        FMLClientHandler.instance().onTexturePackChange(this, var1, (List<TextureFX>)field_1604_f);
     }
 
     private BufferedImage func_6526_a(InputStream p_6526_1_) throws IOException
